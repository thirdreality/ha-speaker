From 89d6fce2e657f52eed654609afdcd38d04dc9bfd Mon Sep 17 00:00:00 2001
From: lingjie li <lingjie.li@amlogic.com>
Date: Thu, 7 Mar 2019 20:19:13 +0800
Subject: [PATCH kmscube 1/3] build issue: Add EGLImage type and use
 gbm_bo_write
 note: The kmscube's automic modeset function need enable
 EGL_ANDROID_native_fence_sync extension.

---
 common.h      |  3 +++
 cube-tex.c    | 10 ++++++++++
 gst-decoder.c |  5 +++++
 3 files changed, 18 insertions(+)

diff --git a/common.h b/common.h
index 17c4073..5e2eafe 100644
--- a/common.h
+++ b/common.h
@@ -48,6 +48,9 @@
 #define EGL_PLATFORM_GBM_KHR              0x31D7
 #endif /* EGL_KHR_platform_gbm */
 
+#ifndef EGLImageKHR
+typedef EGLImageKHR EGLImage;
+#endif
 #ifndef EGL_EXT_platform_base
 #define EGL_EXT_platform_base 1
 typedef EGLDisplay (EGLAPIENTRYP PFNEGLGETPLATFORMDISPLAYEXTPROC) (EGLenum platform, void *native_display, const EGLint *attrib_list);
diff --git a/cube-tex.c b/cube-tex.c
index 57fe02d..7b1b1f8 100644
--- a/cube-tex.c
+++ b/cube-tex.c
@@ -228,6 +228,9 @@ static int get_fd_rgba(uint32_t *pstride, uint64_t *modifier)
 	/* NOTE: do not actually use GBM_BO_USE_WRITE since that gets us a dumb buffer: */
 	bo = gbm_bo_create(gl.gbm->dev, texw, texh, GBM_FORMAT_ABGR8888, GBM_BO_USE_LINEAR);
 
+
+        gbm_bo_write(bo, src, texw * 4 * texh);
+        /*
 	map = gbm_bo_map(bo, 0, 0, texw, texh, GBM_BO_TRANSFER_WRITE, &stride, &map_data);
 
 	for (uint32_t i = 0; i < texh; i++) {
@@ -235,6 +238,7 @@ static int get_fd_rgba(uint32_t *pstride, uint64_t *modifier)
 	}
 
 	gbm_bo_unmap(bo, map_data);
+        */
 
 	fd = gbm_bo_get_fd(bo);
 
@@ -260,7 +264,9 @@ static int get_fd_y(uint32_t *pstride, uint64_t *modifier)
 	uint8_t *map, *src = (uint8_t *)raw_512x512_nv12;
 	int fd;
 
+        gbm_bo_write(bo, src, texw * texh);
 	/* NOTE: do not actually use GBM_BO_USE_WRITE since that gets us a dumb buffer: */
+        /*
 	bo = gbm_bo_create(gl.gbm->dev, texw, texh, GBM_FORMAT_R8, GBM_BO_USE_LINEAR);
 
 	map = gbm_bo_map(bo, 0, 0, texw, texh, GBM_BO_TRANSFER_WRITE, &stride, &map_data);
@@ -270,6 +276,7 @@ static int get_fd_y(uint32_t *pstride, uint64_t *modifier)
 	}
 
 	gbm_bo_unmap(bo, map_data);
+        */
 
 	fd = gbm_bo_get_fd(bo);
 
@@ -295,7 +302,9 @@ static int get_fd_uv(uint32_t *pstride, uint64_t *modifier)
 	uint8_t *map, *src = &((uint8_t *)raw_512x512_nv12)[texw * texh];
 	int fd;
 
+        gbm_bo_write(bo, src, texh/2 * texw);
 	/* NOTE: do not actually use GBM_BO_USE_WRITE since that gets us a dumb buffer: */
+        /*
 	bo = gbm_bo_create(gl.gbm->dev, texw/2, texh/2, GBM_FORMAT_GR88, GBM_BO_USE_LINEAR);
 
 	map = gbm_bo_map(bo, 0, 0, texw/2, texh/2, GBM_BO_TRANSFER_WRITE, &stride, &map_data);
@@ -305,6 +314,7 @@ static int get_fd_uv(uint32_t *pstride, uint64_t *modifier)
 	}
 
 	gbm_bo_unmap(bo, map_data);
+        */
 
 	fd = gbm_bo_get_fd(bo);
 
diff --git a/gst-decoder.c b/gst-decoder.c
index 5431014..452bb5b 100644
--- a/gst-decoder.c
+++ b/gst-decoder.c
@@ -344,11 +344,15 @@ buf_to_fd(const struct gbm *gbm, int size, void *ptr)
 	/* NOTE: do not actually use GBM_BO_USE_WRITE since that gets us a dumb buffer: */
 	bo = gbm_bo_create(gbm->dev, size, 1, GBM_FORMAT_R8, GBM_BO_USE_LINEAR);
 
+        gbm_bo_write(bo, ptr, size);
+        /*
 	map = gbm_bo_map(bo, 0, 0, size, 1, GBM_BO_TRANSFER_WRITE, &stride, &map_data);
 
 	memcpy(map, ptr, size);
 
 	gbm_bo_unmap(bo, map_data);
+        */
+
 
 	fd = gbm_bo_get_fd(bo);
 
@@ -487,6 +491,7 @@ buffer_to_image(struct decoder *dec, GstBuffer *buf)
 
 		image = dec->egl->eglCreateImageKHR(dec->egl->display, EGL_NO_CONTEXT,
 				EGL_LINUX_DMA_BUF_EXT, NULL, attr);
+		assert(image);
 	}
 
 	/* Cleanup */
-- 
2.7.4

