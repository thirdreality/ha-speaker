Index: gstreamer1-1.16.2/gst/gstpoll.c
===================================================================
--- gstreamer1-1.16.2.orig/gst/gstpoll.c
+++ gstreamer1-1.16.2/gst/gstpoll.c
@@ -1295,6 +1295,58 @@ gst_poll_fd_can_read (const GstPoll * se
   return res;
 }
 
+static gboolean
+gst_poll_fd_can_read_pri_unlocked (const GstPoll * set, GstPollFD * fd)
+{
+  gboolean res = FALSE;
+  gint idx;
+
+  idx = find_index (set->active_fds, fd);
+  if (idx >= 0) {
+#ifndef G_OS_WIN32
+    struct pollfd *pfd = &g_array_index (set->active_fds, struct pollfd, idx);
+
+    res = (pfd->revents & POLLPRI) != 0;
+#else
+    WinsockFd *wfd = &g_array_index (set->active_fds, WinsockFd, idx);
+
+    res = (wfd->events.lNetworkEvents & FD_ACCEPT) != 0;
+#endif
+  } else {
+    GST_WARNING ("%p: couldn't find fd !", set);
+  }
+  GST_DEBUG ("%p: fd (fd:%d, idx:%d) %d", set, fd->fd, fd->idx, res);
+
+  return res;
+}
+
+/**
+ * gst_poll_fd_can_read_pri:
+ * @set: a file descriptor set.
+ * @fd: a file descriptor.
+ *
+ * Check if @fd in @set has data to be read.
+ *
+ * Returns: %TRUE if the descriptor has data to be read.
+ */
+gboolean
+gst_poll_fd_can_read_pri (const GstPoll * set, GstPollFD * fd)
+{
+  gboolean res = FALSE;
+
+  g_return_val_if_fail (set != NULL, FALSE);
+  g_return_val_if_fail (fd != NULL, FALSE);
+  g_return_val_if_fail (fd->fd >= 0, FALSE);
+
+  g_mutex_lock (&((GstPoll *) set)->lock);
+
+  res = gst_poll_fd_can_read_pri_unlocked (set, fd);
+
+  g_mutex_unlock (&((GstPoll *) set)->lock);
+
+  return res;
+}
+
 /**
  * gst_poll_fd_can_write:
  * @set: a file descriptor set.
Index: gstreamer1-1.16.2/gst/gstpoll.h
===================================================================
--- gstreamer1-1.16.2.orig/gst/gstpoll.h
+++ gstreamer1-1.16.2/gst/gstpoll.h
@@ -104,6 +104,9 @@ GST_API
 gboolean        gst_poll_fd_can_read      (const GstPoll *set, GstPollFD *fd);
 
 GST_API
+gboolean        gst_poll_fd_can_read_pri  (const GstPoll *set, GstPollFD *fd);
+
+GST_API
 gboolean        gst_poll_fd_can_write     (const GstPoll *set, GstPollFD *fd);
 
 GST_API
