#!/bin/sh

# shellcheck source=/dev/null

if [ "$1" = "stop" ]; then
    exit 0
fi


create_property_set_script()
{
    echo "create missing /etc/property_set.sh..."

    mount -o remount rw /

    echo "#!/bin/sh" > /etc/property_set.sh
    echo "#LOG_LEVEL=0--no log output from amadec; LOG_LEVEL=1--output amadec log" >> /etc/property_set.sh
    echo "export LOG_LEVEL=0" >> /etc/property_set.sh
    echo "export CURLLOG_LEVEL=0" >> /etc/property_set.sh
    echo "export DASHLOG_LEVEL=0" >> /etc/property_set.sh
    echo "#audio formats to decode use arm decoder" >> /etc/property_set.sh
    echo "export media_arm_audio_decoder=ape,flac,dts,ac3,eac3,wma,wmapro,mp3,aac,aac_latm,vorbis,raac,cook,amr,pcm,adpcm" >> /etc/property_set.sh
    echo "export media_audio_use_hardabuf=0" >> /etc/property_set.sh
    echo "#third party lib modules to use" >> /etc/property_set.sh
    echo "export media_libplayer_modules=libcurl_mod.so,libdash_mod.so" >> /etc/property_set.sh
}

SWUPDATE_PATH=/mnt/swupdate/

test_run_swupdateui() {
    if [ -f "/bin/swupdateui" ]; then
        if [ -e "/etc/recovery.jpg" ]; then
            swupdateui /etc/recovery.jpg &
        elif [ -e "/etc/recovery.bmp" ]; then
            swupdateui /etc/recovery.bmp &
        fi
    fi
}

# eval_swupdate() {
#     eval swupdate "$@"
#     "$@"
# }

mount_data_partition() {

    data_mtd_number=$(grep  -E "data" /proc/mtd | awk -F : '{print $1}' | grep -o '[0-9]\+')
    if [ -n "${data_mtd_number}" ]; then
        echo "get data mtd number, now mount data partition......"
        ubiattach /dev/ubi_ctrl -m "${data_mtd_number}"
        mount -t ubifs /dev/ubi0_0 /mnt
    else
        echo "can not get data mtd number, maybe emmc device......"
        # Waiting for /dev/data device to become ready
        TimedOut=10000 #10*1000 milisecond
        WaitedTime=0
        while [ "$WaitedTime" -lt "$TimedOut" ]
        do
            if [ -b "/dev/data" ]; then
                echo "/dev/data is ready now."
                break;
            fi
            sleep 0.1
            WaitedTime=$((WaitedTime+100))
            echo "root is not ready.  Waited for ${WaitedTime} milisecond"
        done
        mount -t ext4 /dev/data /mnt
    fi
}


check_network_connectivity() {

    # shellcheck disable=SC3046 disable=SC3051
    source "$SWUPDATE_PATH/apply_info.sh" /mnt

    # 1. open the wifi interface and setup wlan0
    "$SWUPDATE_PATH"/start_wifi.sh

    wait_time=90
    ping_time=0
    while [ $ping_time -lt $wait_time ]
    do
        echo "Tried $ping_time seconds"
        ping_output=$(ping -c 1 "$SWUPDATE_OTA_SERVER" 2>&1)
        ping_result=$?
        echo "ping return result: $ping_result"
        case $ping_result in
            0)
                ret=1
                if wget --spider -q "$(cat "$OTA_FILE_FLAG")"; then
                    ret=2
                fi
                return $ret
            ;;
            *)
                if echo "$ping_output" | grep "Network is unreachable" ; then
                    echo "Network is unreachable, cost 1 second"
                    sleep 1
                    ping_time=$((ping_time+1))
                else
                    echo "Ping failed, this will cost 10 second"
                    ping_time=$((ping_time+10))
                fi
            ;;
        esac
    done
    return 0
}

get_non_ubi_part() {
    system_mtd_number=$(grep -E "system" /proc/mtd | awk -F : '{print $1}' | grep -o '[0-9]\+')
    i=0
    unset non_ubi_part
    non_ubi_part=""
    while [ $i -lt "$system_mtd_number" ];
    do
        non_ubi_part="$non_ubi_part$i "
        # echo $i
        i=$((i+1))
    done
    export non_ubi_part
}

main() {

    OTA_FILE_FLAG=$SWUPDATE_PATH/enable-network-ota

    # 1. mount data part on /mnt
    mount_data_partition
    # 2. got list of non-ubi part number
    get_non_ubi_part
    # 3. swupdate找不到/etc/property_set.sh
    # 暂时手动去创建
    create_property_set_script

    if [ -f "/mnt/software.swu" ]; then
        #
        # Trying upgrade from local file
        #
        echo "find software.swu in data, now start update......"

        test_run_swupdateui
        if [ ! -f "/proc/inand" ]; then
            swupdate -l 6 -k /etc/swupdate-public.pem -i /mnt/software.swu -b "$non_ubi_part" -H S420:1.0
        else
            swupdate -l 6 -k /etc/swupdate-public.pem -i /mnt/software.swu -H S420:1.0
        fi
        result=$?
        if [ $result -eq 0 ] ; then
            echo "swupdate software.swu from data sucess!"
            rm /mnt/software.swu
            umount /mnt
            urlmisc clean
            sync
            echo "swupdate reboot now!"
            sleep 2
            reboot
        else
            echo "swupdate software.swu from data failed!"
            urlmisc clean
            umount /mnt
        fi

    elif [ -f "$OTA_FILE_FLAG" ]; then
        #
        # Trying upgrade from network service
        #
        # 1. check the connectivity
        check_network_connectivity
        chk_result=$?

        # 2. if network is ready, then upgrade
        if [ 0 -eq $chk_result ]; then
                echo "Network is not ready, reboot to normal system"
        elif [ 1 -eq $chk_result ]; then
            echo "OTA_PACKAGE file is not ready, reboot to normal system"
        elif [ 2 -eq $chk_result ]; then
            test_run_swupdateui
            if [ ! -f "/proc/inand" ]; then
                swupdate -b "$non_ubi_part" -l 6 -k /etc/swupdate-public.pem -D "-t 60"
            else
                swupdate -l 6 -k /etc/swupdate-public.pem -D "-t 60"
            fi
            swupdate_result=$?
            echo "swupdate return result: $swupdate_result"
            case $swupdate_result in
                0)
                    echo "swupdate software.swu from url sucess!"
                    rm -f $SWUPDATE_PATH/swupdate_retry
                ;;
                10)
                    echo "swupdate software.swu from url failed, need retry!"
                    keep_recovery=1
                    touch $SWUPDATE_PATH/swupdate_retry
                ;;
                *)
                    echo "swupdate software.swu from url failed, return to normal system!"
                ;;
            esac
        else
            echo "Should not come here, please debug ASAP."
            # echo "Clean up recovery flag in misc partition, then reboot to normal system"
        fi

        if [ -f $SWUPDATE_PATH/swupdate_retry ]; then
            echo "Because upgrade already in progress, We will try util upgrade OK."
            echo "We will not clean up anything,becaue they are still needed by next trying."
        else
            if [ -z "$keep_recovery" ]; then
                echo "Clean up recovery settings, will NOT enter recovery on next boot."
                urlmisc clean
                rm -fr $SWUPDATE_PATH
            fi
        fi
        sync
        umount /mnt
        # shellcheck disable=SC3045
        if ! read -r -t 5 -p "Rebooting...^-^..." ; then
            reboot -f
        fi
    else
        #
        # Trying upgrade from USB device
        #
        # wait for usb device
        echo "can not find software.swu in data, now find usb device......"
        sleep 5
        if [ -f "/media/software.swu" ]; then
            test_run_swupdateui
            if [ ! -f "/proc/inand" ]; then
                swupdate -l 6 -k /etc/swupdate-public.pem -i /media/software.swu -b "$non_ubi_part"
            else
                swupdate -l 6 -k /etc/swupdate-public.pem -i /media/software.swu
            fi
            result=$?
            if [ $result -eq 0 ] ; then
                echo "swupdate software.swu from usb sucess!"
                urlmisc clean
                sync
                echo "swupdate reboot now!"
                sleep 2
                reboot
            else
                echo "swupdate software.swu from usb failed!"
                urlmisc clean
            fi
        else
            echo "no software.swu found in usb device"
            #execute swupdate for clear misc, no need into recovery after reboot
            swupdate
            urlmisc clean
        fi
    fi
}

main
